import os
import numpy as np
import unittest
from ccquery.ngram import LanguageModel
from ccquery.utils import io_utils

def read_data(file, to_float=False):
    """Read contents of file"""
    data = []
    with open(file, encoding='utf-8') as istream:
        for line in istream:
            if to_float:
                data.append(float(line.strip()))
            else:
                data.append(line.strip())
    return data

class TestLM(unittest.TestCase):
    """Test the ArpaLanguageModel load and change methods"""

    def setUp(self):
        """Set up local variables"""

        mfile = os.path.join(os.path.dirname(__file__), 'sample-model.bin')
        sqfile = os.path.join(os.path.dirname(__file__), 'sample-sentences.txt')
        scfile = os.path.join(os.path.dirname(__file__), 'sample-scores.txt')

        io_utils.check_file_readable(mfile)
        io_utils.check_file_readable(sqfile)
        io_utils.check_file_readable(scfile)

        self.model = LanguageModel(mfile, order=3)
        self.data = read_data(sqfile)
        self.scores = read_data(scfile, to_float=True)

    def tearDown(self):
        """Clear variables"""
        del self.data
        del self.scores
        del self.model

    def test_scores(self):
        """Test the scores generated by the trie-based model"""

        scores = []
        for sequence in self.data:
            scores.append(self.model[sequence])

        # allow tolerance to 6 decimals
        np.testing.assert_almost_equal(scores, self.scores, 6)

    def test_order(self):
        """Test the re-ordering generated by the trie-based model"""

        ref_order = [
            'début du développement',
            'début du cube',
            'du maintenant',
            'le début du corps',
            'le début du groupe',
            'le début du développement',
            'le début du cube',
            '<s> le début du corps </s>',
            'début du maintenant',
            'le début du maintenant',
        ]

        order = self.model.order_sequences(self.data)
        self.assertEqual(ref_order, order[-10:])
